# -*- coding: utf-8 -*-
"""Object-Poem-generation-using-lstm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19X-whjTvAEsVq7C3kMplqMvgExv5bmgf
"""

import tensorflow as tf
import string
import requests
import pandas as pd
response = requests.get('https://raw.githubusercontent.com/laxmimerit/poetry-data/master/adele.txt')
print(response.text)
data = response.text.splitlines()
print('Length of data: ', len(data))

import numpy as np
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences

token = Tokenizer()
token.fit_on_texts(data)

help(token)

token.word_index

encoded_text = token.texts_to_sequences(data)
# vocabulary size should be + 1
vocab_size = len(token.word_counts) + 1

datalist = []
for d in encoded_text:
  if len(d)>1:
    for i in range(2, len(d)):
      datalist.append(d[:i])
      print(d[:i])

max_length = 20
sequences = pad_sequences(datalist, maxlen=max_length, padding='pre')
X = sequences[:, :-1]
y = sequences[:, -1]
y = to_categorical(y, num_classes=vocab_size)
seq_length = X.shape[1]

model = Sequential()
model.add(Embedding(vocab_size, 50, input_length=seq_length))
model.add(LSTM(100, return_sequences=True))
model.add(LSTM(100))
model.add(Dense(100, activation='relu'))
model.add(Dense(vocab_size, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
#it will take sometime to complete traning
model.fit(X, y, batch_size=32, epochs=50)

import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences

poetry_length = 10

def generate_poetry(seed_text, n_lines):
    all_poetry = []  # Store generated lines

    for _ in range(n_lines):
        text = []
        for _ in range(poetry_length):
            encoded = token.texts_to_sequences([seed_text])
            encoded = pad_sequences(encoded, maxlen=seq_length, padding='pre')

            y_pred = np.argmax(model.predict(encoded, verbose=0), axis=-1)  # Suppress logs

            predicted_word = ""
            for word, index in token.word_index.items():
                if index == y_pred:
                    predicted_word = word
                    break

            seed_text += ' ' + predicted_word  # Append word to context
            text.append(predicted_word)

        seed_text = text[-1]  # Set last word as the new seed
        all_poetry.append(' '.join(text))  # Store generated line

    print("\n".join(all_poetry))  # Print final poem without logs

# Example usage
seed_text = 'i love you'
generate_poetry(seed_text, 5)